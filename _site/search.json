[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(plotly)\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndownload.file(data_url, \"df.csv\")\ndf &lt;- read.csv(\"df.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html#chemical-space-evolution-analysis",
    "href": "index.html#chemical-space-evolution-analysis",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(plotly)\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure1.csv\"\ndownload.file(data_url, \"df.csv\")\ndf &lt;- read.csv(\"df.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html#chemical-space-analysis",
    "href": "index.html#chemical-space-analysis",
    "title": "Chemical Space Analysis",
    "section": "Chemical Space Analysis",
    "text": "Chemical Space Analysis\n\\[\nC_{i,t} = \\frac{1}{n_t} \\sum_s \\frac{n_{i,s,t}}{n_{a,s,t}}\n\\]\nDescription of Elements:\n\n\\(Ci,tCi,t\\)​: Contribution of country ii to the chemical space (CS) expansion in year tt.\n\\(ntnt\\)​: Total number of new reported chemicals in year tt.\n\\(ss\\): Index representing a specific chemical substance.\n\\(ni,s,tni,s,t\\)​: Number of authors from country ii who published substance ss for the first time in year tt.\n\\(na,s,tna,s,t\\)​: Total number of authors participating in the publication of substance ss in year tt.\n\n\n\n\n\n\n\nNote\n\n\n\nThis formula calculates the weighted contribution of a country to the discovery of new chemical substances. The contribution is proportional to the number of authors from a specific country relative to the total number of authors involved in reporting each substance. Finally, this contribution is normalized by the total number of new substances for that year."
  },
  {
    "objectID": "fig2.html",
    "href": "fig2.html",
    "title": "Fig 2",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure2.csv\"\ndownload.file(data_url, \"df2.csv\")\ndf &lt;- read.csv(\"df2.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  \n  # Data Section\n  card(\n    card_header(\"Data Explorer\", class = \"bg-primary text-light\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  \n  downloadButton(\"downloadData\", \"Download Dataset\", class = \"btn-success\"),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "fig2.html#chemical-space-evolution-analysis",
    "href": "fig2.html#chemical-space-evolution-analysis",
    "title": "Fig 2",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figure2.csv\"\ndownload.file(data_url, \"df2.csv\")\ndf &lt;- read.csv(\"df2.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  \n  # Data Section\n  card(\n    card_header(\"Data Explorer\", class = \"bg-primary text-light\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  \n  downloadButton(\"downloadData\", \"Download Dataset\", class = \"btn-success\"),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "fig3.html",
    "href": "fig3.html",
    "title": "Fig Supp",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\n\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figureSup.csv\"\ndownload.file(data_url, \"df3.csv\")\ndf &lt;- read.csv(\"df3.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  \n  # Data Section\n  card(\n    card_header(\"Data Explorer\", class = \"bg-primary text-light\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  \n  downloadButton(\"downloadData\", \"Download Dataset\", class = \"btn-success\"),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "fig3.html#chemical-space-evolution-analysis",
    "href": "fig3.html#chemical-space-evolution-analysis",
    "title": "Fig Supp",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\n\n\n######### Data Preparation #########\n# df &lt;- read.csv(\"df.csv\")\ndata_url &lt;- \"https://raw.githubusercontent.com/santi-rios/China-Chemical-Rise/refs/heads/main/data/merged_figureSup.csv\"\ndownload.file(data_url, \"df3.csv\")\ndf &lt;- read.csv(\"df3.csv\") \n\n######### Custom Labels #########\nfigure_labels &lt;- list(\n  \"Figure1-a\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-a_b\" = list(y_title = \"Contribution Index\", map_title = \"Chemical Space Contribution\"), \n  \"Figure1-b\" = list(y_title = \"Collaboration Index\", map_title = \"International Collaborations\"),\n  \"Figure1-c\" = list(y_title = \"Collaboration Percentage\", map_title = \"China-US Collaboration\"),\n  \"Figure1-d\" = list(y_title = \"GDP Growth Rate (%)\", map_title = \"Economic Indicators\"),\n  \"Figure1-e\" = list(y_title = \"Researchers (Count)\", map_title = \"R&D Workforce\")\n)\n\n######### APP #########\nui &lt;- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\", primary = \"#2c3e50\", secondary = \"#18bc9c\"),\n  \n  # Navbar at the top\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  \n  br(),\n  \n  layout_columns(\n    col_widths = c(3, 9),\n    \n    # Control Panel\n    card(\n      card_header(\"Controls\", class = \"bg-primary text-light\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1-a\",\n                    width = \"100%\"),\n        \n        div(class = \"form-group\",\n            h5(\"Select Countries:\"),\n            uiOutput(\"country_checkboxes\")\n        ),\n        \n        div(class = \"animation-controls\",\n            sliderInput(\"year\", \"Year\",\n                        min = min(df$Year) ,\n                        max = max(df$Year) - 1,\n                        value = min(df$Year),\n                        step = 1,\n                        animate = animationOptions(interval = 500, loop = FALSE),\n                        width = \"100%\")\n        ),\n        \n        uiOutput(\"figure_description\")\n      )\n    ),\n    \n    # Visualization Panel\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Interactive Visualizations\", class = \"bg-primary text-light\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\"),\n          br(),\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  \n  # Data Section\n  card(\n    card_header(\"Data Explorer\", class = \"bg-primary text-light\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  \n  downloadButton(\"downloadData\", \"Download Dataset\", class = \"btn-success\"),\n  \n  # Footer\n  div(\n    class = \"footer navbar navbar-static-bottom bg-light\",\n    style = \"margin-bottom: 20px;\",\n    div(\n      class = \"container-fluid\",\n      \"Data source: Bermudez-Montana, Garcia-Chung, et al, 2025 - \",\n      a(\"ChemRxiv Publication\", href = \"https://doi.org/10.26434/chemrxiv-2025-d2zc8\",\n        style = \"color: #18bc9c;\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive axis labels\n  axis_labels &lt;- reactive({\n    req(input$facet)\n    figure_labels[[input$facet]] %||% list(y_title = \"Value\", map_title = \"Value\")\n  })\n  \n  # Country selection checkboxes\n  output$country_checkboxes &lt;- renderUI({\n    req(input$facet)\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique() %&gt;% \n      sort()\n    \n    fluidRow(\n      column(6,\n             checkboxGroupInput(\"countries\", NULL, \n                               choices = head(countries, ceiling(length(countries)/2)),\n                               selected = head(countries, 4))\n      ),\n      column(6,\n             checkboxGroupInput(\"countries2\", NULL,\n                               choices = tail(countries, floor(length(countries)/2)),\n                               selected = tail(countries, 4))\n      )\n    )\n  })\n  \n  # Combine checkbox inputs\n  selected_countries &lt;- reactive({\n    unique(c(input$countries, input$countries2))\n  })\n  \n  # Update figure description\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1-a\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-a_b\" ~ \"Country participation in chemical space growth using formula:\",\n      input$facet == \"Figure1-b\" ~ \"Top international collaborations in chemical research:\",\n      input$facet == \"Figure1-c\" ~ \"China-US collaborative contributions to new substances:\",\n      input$facet == \"Figure1-d\" ~ \"Economic indicators and major events timeline:\",\n      input$facet == \"Figure1-e\" ~ \"Research workforce development metrics:\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    \n    div(class = \"callout\",\n        h5(desc_text),\n        if(input$facet == \"Figure1-a\") withMathJax(helpText(\"$$C_{i,t} = \\\\frac{1}{n_t} \\\\sum_s \\\\frac{n_{i,s,t}}{n_{a,s,t}}$$\"))\n    )\n  })\n  \n  # Main emissions plot\n  output$emissionsPlot &lt;- renderPlotly({\n    req(selected_countries(), input$facet, input$year)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% selected_countries(),\n             source == input$facet,\n             Year &lt;= input$year) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    fig &lt;- plot_ly(filtered_data, x = ~Year, y = ~Value, color = ~Country,\n            type = 'scatter', mode = 'lines+markers', line = list(simplify = FALSE, width = 2), showlegend = TRUE,\n            hoverinfo = 'text', text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                                              axis_labels()$y_title, \": \", round(Value, 2),\n                                              \"&lt;br&gt;Year: \", Year))\n      # add_text(text = ~Country, showlegend = FALSE, textposition = \"top right\") \n\n    # Add annotations for the latest year\n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n\n    fig &lt;- fig %&gt;%\n      layout(\n        title = paste(\"Temporal Analysis -\", input$facet),\n        xaxis = list(title = \"Year\", gridcolor = \"#ecf0f1\"),\n        yaxis = list(title = axis_labels()$y_title, gridcolor = \"#ecf0f1\"),\n        hovermode = \"x unified\",\n        plot_bgcolor = \"#ffffff\",\n        legend = list(orientation = 'h', y = -0.2),\n        margin = list(r = 40)\n      )\n\n    if (input$facet == \"Figure1-d\") {\n      fig %&gt;%\n    add_text(showlegend = FALSE, x = 2020, y = 10,\n            text = \"COVID-19\") %&gt;%\n    add_text(showlegend = FALSE, x = 2007, y = 15,\n            text = \"Global Financial Crisis\")\n    }\n    else {\n       fig\n    }\n  })\n  \n  # World map visualization\n  output$worldMap &lt;- renderPlotly({\n    req(input$facet, input$year)\n    \n    map_data &lt;- df %&gt;%\n      filter(source == input$facet, Year == input$year)\n    \n    if (nrow(map_data) == 0) return(plotly_empty())\n    \n    plot_geo(map_data) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        locations = ~iso3c,\n        text = ~paste0(\"&lt;b&gt;\", Country, \"&lt;/b&gt;&lt;br&gt;\",\n                      axis_labels()$map_title, \": \", round(Value, 2)),\n        hoverinfo = \"text\",\n        marker = list(line = list(color = \"white\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = axis_labels()$map_title) %&gt;%\n      layout(\n        title = paste(\"Global Distribution -\", input$facet, \"(\", input$year, \")\"),\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#f8f9fa\"\n        )\n      )\n  })\n  \n}\n\nshinyApp(ui, server)"
  }
]