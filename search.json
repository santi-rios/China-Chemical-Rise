[
  {
    "objectID": "template-r-shinylive.html",
    "href": "template-r-shinylive.html",
    "title": "Template for r-shinylive Quarto document",
    "section": "",
    "text": "Important\n\n\n\nPlease switch {shinylive-r} to {shinylive-r}. Weâ€™ve suppressed this example from running by using {{}}.\n\n\n```{shinylive-r}\n#| standalone: true\n\nui &lt;- ...\n\nserver &lt;- function(input, output, session) {\n  ...\n}\n\nshinyApp(ui, server)\n```\nFull Skeletal Document Source:\n---\ntitle: \"Template for r-shinylive Quarto document\"\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n\nui &lt;- ...\n\nserver &lt;- function(input, output, session) {\n  ...\n}\n\nshinyApp(ui, server)\n```"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(countrycode)  # For country codes\nlibrary(DT)\n\n######### Data Preparation #########\nread_figuras &lt;- function(directory) {\n  files &lt;- list.files(directory, pattern = \"^Figure1.*\\\\.tsv$\", full.names = TRUE)\n  \n  data_list &lt;- lapply(files, function(file) {\n    read_tsv(file) %&gt;%\n      pivot_longer(cols = -Country, names_to = \"Year\", values_to = \"Value\") %&gt;%\n      mutate(Year = as.numeric(Year),\n             source = tools::file_path_sans_ext(basename(file)))\n  })\n  \n  bind_rows(data_list)\n}\n\ndf &lt;- read_figuras(\"data/\")\n\n######### Animation Function #########\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- rlang::ensym(var)\n  lvls &lt;- sort(unique(dat[[var]]))\n  dats &lt;- lapply(lvls, function(x) {\n    dat %&gt;% filter(!!var &lt;= x) %&gt;% mutate(frame = x)\n  })\n  bind_rows(dats)\n}\n\n######### APP #########\nui &lt;- page_fluid(\n  theme = bs_theme(bootswatch = \"flatly\"),\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  br(),\n  layout_columns(\n    col_widths = c(3, 9),\n    card(\n      card_header(\"Controls\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1a\",\n                    width = \"100%\"),\n        selectInput(\"countries\", \"Choose Countries (delete with backspace):\",\n                    choices = NULL,\n                    selected = NULL,\n                    multiple = TRUE,\n                    width = \"100%\"),\n        uiOutput(\"figure_description\")\n      )\n    ),\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Figure 1\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\")\n        )\n      ),\n      card(\n        full_screen = TRUE,\n        card_header(\"World Map Visualization\"),\n        card_body(\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  br(),\n  card(\n    card_header(\"Data Table\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  br(),\n  downloadButton(\"downloadData\", \"Download Data\"),\n  div(\n    class = \"navbar navbar-static-bottom bg-light\",\n    div(\n      class = \"container-fluid\",\n      \"Data taken from Bermudez-Montana, Garcia-Chung, et al, 2025: \",\n      a(\"https://doi.org/10.26434/chemrxiv-2025-d2zc8\", \n        href = \"https://chemrxiv.org/engage/chemrxiv/article-details/67920ada6dde43c908f688f6\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  observeEvent(input$facet, {\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique()\n    \n    updateSelectInput(inputId = \"countries\", \n                      choices = countries,\n                      selected = head(countries, 4))\n  })\n\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1a\" ~ \"Country participation in the growth of the CS\",\n      input$facet == \"Figure1b\" ~ \"Eight most relevant international collaborations\",\n      input$facet == \"Figure1c\" ~ \"China-US collaboration in new substances\",\n      input$facet == \"Figure1d\" ~ \"GDP per capita growth rate highlights\",\n      input$facet == \"Figure1e\" ~ \"Researchers in R&D activities\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    div(class = \"text-muted\", style = \"margin: 10px 0;\", desc_text)\n  })\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(input$countries, input$facet)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% input$countries, \n             source == input$facet) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    animated_data &lt;- accumulate_by(filtered_data, Year)\n    \n    fig &lt;- animated_data %&gt;%\n      plot_ly(\n        x = ~Year,\n        y = ~Value,\n        color = ~Country,\n        frame = ~frame,\n        type = 'scatter',\n        mode = 'lines',\n        line = list(simplify = FALSE, width = 2),\n        hoverinfo = 'text',\n        text = ~paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Value:\", round(Value, 2))\n      )\n    \n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n    \n    fig %&gt;% layout(\n      title = paste(\"Chemical Space Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", range = c(1995, 2023)),\n      yaxis = list(title = \"Value\"),\n      hovermode = \"x unified\",\n      legend = list(orientation = \"h\", y = -0.2),\n      margin = list(r = 40)\n    ) %&gt;%\n    animation_opts(\n      frame = 300, \n      transition = 100,\n      redraw = FALSE,\n      mode = \"afterall\"\n    ) %&gt;%\n    animation_slider(\n      currentvalue = list(font = list(color = \"black\"))\n    )\n  })\n\n  # Prepare map data\n  map_data &lt;- reactive({\n    req(input$facet)\n    \n    df %&gt;%\n      filter(source == input$facet) %&gt;%\n      group_by(Country) %&gt;%\n      filter(Year == max(Year)) %&gt;%\n      ungroup() %&gt;%\n      mutate(\n        iso_code = countrycode(Country, \"country.name\", \"iso3c\")\n        # hover_text = paste(\n        #   Country, \"&lt;br&gt;\",\n        #   \"Latest Value (\", Year, \"): \", round(Value, 2),\n        #   \"&lt;br&gt;Source: \", input$facet\n        ) %&gt;%\n      na.omit()  \n  })\n  \n  output$worldMap &lt;- renderPlotly({\n    req(map_data())\n    \n    plot_geo(map_data()) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        # text = ~hover_text,\n        locations = ~iso_code,\n        # hoverinfo = \"text\",\n        marker = list(line = list(color = \"gray\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = \"Value\") %&gt;%\n      layout(\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#F0F0F0\",\n          countrycolor = \"#D3D3D3\"\n        ),\n        margin = list(l = 0, r = 0, t = 0, b = 0)\n      )\n  })\n\n  output$table &lt;- renderDT({\n    req(input$facet)\n    \n    df_table &lt;- df %&gt;%\n      filter(source == input$facet) %&gt;%\n      select(Country, Year, Value) %&gt;%\n      datatable(\n        rownames = FALSE,\n        options = list(\n          pageLength = 10,\n          lengthMenu = c(10, 20, 30),\n          autoWidth = TRUE\n        )\n      )\n    df_table  \n  })\n\n  output$downloadData &lt;- downloadHandler(\n    filename = function() {\n      paste(\"data-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv(df, file, row.names = FALSE)\n    }\n  )\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html#chemical-space-evolution-analysis",
    "href": "index.html#chemical-space-evolution-analysis",
    "title": "Chemical Space Analysis",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(countrycode)  # For country codes\nlibrary(DT)\n\n######### Data Preparation #########\nread_figuras &lt;- function(directory) {\n  files &lt;- list.files(directory, pattern = \"^Figure1.*\\\\.tsv$\", full.names = TRUE)\n  \n  data_list &lt;- lapply(files, function(file) {\n    read_tsv(file) %&gt;%\n      pivot_longer(cols = -Country, names_to = \"Year\", values_to = \"Value\") %&gt;%\n      mutate(Year = as.numeric(Year),\n             source = tools::file_path_sans_ext(basename(file)))\n  })\n  \n  bind_rows(data_list)\n}\n\ndf &lt;- read_figuras(\"data/\")\n\n######### Animation Function #########\naccumulate_by &lt;- function(dat, var) {\n  var &lt;- rlang::ensym(var)\n  lvls &lt;- sort(unique(dat[[var]]))\n  dats &lt;- lapply(lvls, function(x) {\n    dat %&gt;% filter(!!var &lt;= x) %&gt;% mutate(frame = x)\n  })\n  bind_rows(dats)\n}\n\n######### APP #########\nui &lt;- page_fluid(\n  theme = bs_theme(bootswatch = \"flatly\"),\n  div(\n    class = \"navbar navbar-static-top primary bg-primary\",\n    div(\"China's rise in the chemical space and the decline of US influence\", \n        class = \"container-fluid\")\n  ),\n  br(),\n  layout_columns(\n    col_widths = c(3, 9),\n    card(\n      card_header(\"Controls\"),\n      card_body(\n        selectInput(\"facet\", \"Select figure:\",\n                    choices = unique(df$source),\n                    selected = \"Figure1a\",\n                    width = \"100%\"),\n        selectInput(\"countries\", \"Choose Countries (delete with backspace):\",\n                    choices = NULL,\n                    selected = NULL,\n                    multiple = TRUE,\n                    width = \"100%\"),\n        uiOutput(\"figure_description\")\n      )\n    ),\n    layout_column_wrap(\n      width = 1/1,\n      card(\n        full_screen = TRUE,\n        card_header(\"Figure 1\"),\n        card_body(\n          plotlyOutput(\"emissionsPlot\", height = \"50vh\")\n        )\n      ),\n      card(\n        full_screen = TRUE,\n        card_header(\"World Map Visualization\"),\n        card_body(\n          plotlyOutput(\"worldMap\", height = \"40vh\")\n        )\n      )\n    )\n  ),\n  br(),\n  card(\n    card_header(\"Data Table\"),\n    card_body(\n      DTOutput(\"table\")\n    )\n  ),\n  br(),\n  downloadButton(\"downloadData\", \"Download Data\"),\n  div(\n    class = \"navbar navbar-static-bottom bg-light\",\n    div(\n      class = \"container-fluid\",\n      \"Data taken from Bermudez-Montana, Garcia-Chung, et al, 2025: \",\n      a(\"https://doi.org/10.26434/chemrxiv-2025-d2zc8\", \n        href = \"https://chemrxiv.org/engage/chemrxiv/article-details/67920ada6dde43c908f688f6\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  observeEvent(input$facet, {\n    countries &lt;- df %&gt;% \n      filter(source == input$facet) %&gt;% \n      pull(Country) %&gt;% \n      unique()\n    \n    updateSelectInput(inputId = \"countries\", \n                      choices = countries,\n                      selected = head(countries, 4))\n  })\n\n  output$figure_description &lt;- renderUI({\n    req(input$facet)\n    desc_text &lt;- case_when(\n      input$facet == \"Figure1a\" ~ \"Country participation in the growth of the CS\",\n      input$facet == \"Figure1b\" ~ \"Eight most relevant international collaborations\",\n      input$facet == \"Figure1c\" ~ \"China-US collaboration in new substances\",\n      input$facet == \"Figure1d\" ~ \"GDP per capita growth rate highlights\",\n      input$facet == \"Figure1e\" ~ \"Researchers in R&D activities\",\n      TRUE ~ paste(\"Displaying:\", input$facet)\n    )\n    div(class = \"text-muted\", style = \"margin: 10px 0;\", desc_text)\n  })\n  \n  output$emissionsPlot &lt;- renderPlotly({\n    req(input$countries, input$facet)\n    \n    filtered_data &lt;- df %&gt;% \n      filter(Country %in% input$countries, \n             source == input$facet) %&gt;% \n      arrange(Year)\n    \n    if (nrow(filtered_data) == 0) return(plotly_empty())\n    \n    animated_data &lt;- accumulate_by(filtered_data, Year)\n    \n    fig &lt;- animated_data %&gt;%\n      plot_ly(\n        x = ~Year,\n        y = ~Value,\n        color = ~Country,\n        frame = ~frame,\n        type = 'scatter',\n        mode = 'lines',\n        line = list(simplify = FALSE, width = 2),\n        hoverinfo = 'text',\n        text = ~paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Value:\", round(Value, 2))\n      )\n    \n    final_data &lt;- filtered_data %&gt;% \n      group_by(Country) %&gt;% \n      filter(Year == max(Year)) %&gt;% \n      ungroup()\n    \n    for(i in 1:nrow(final_data)) {\n      fig &lt;- fig %&gt;% add_annotations(\n        x = final_data$Year[i],\n        y = final_data$Value[i],\n        text = final_data$Country[i],\n        xref = \"x\",\n        yref = \"y\",\n        xanchor = 'left',\n        yanchor = 'middle',\n        showarrow = FALSE,\n        font = list(size = 12),\n        xshift = 10\n      )\n    }\n    \n    fig %&gt;% layout(\n      title = paste(\"Chemical Space Analysis -\", input$facet),\n      xaxis = list(title = \"Year\", range = c(1995, 2023)),\n      yaxis = list(title = \"Value\"),\n      hovermode = \"x unified\",\n      legend = list(orientation = \"h\", y = -0.2),\n      margin = list(r = 40)\n    ) %&gt;%\n    animation_opts(\n      frame = 300, \n      transition = 100,\n      redraw = FALSE,\n      mode = \"afterall\"\n    ) %&gt;%\n    animation_slider(\n      currentvalue = list(font = list(color = \"black\"))\n    )\n  })\n\n  # Prepare map data\n  map_data &lt;- reactive({\n    req(input$facet)\n    \n    df %&gt;%\n      filter(source == input$facet) %&gt;%\n      group_by(Country) %&gt;%\n      filter(Year == max(Year)) %&gt;%\n      ungroup() %&gt;%\n      mutate(\n        iso_code = countrycode(Country, \"country.name\", \"iso3c\")\n        # hover_text = paste(\n        #   Country, \"&lt;br&gt;\",\n        #   \"Latest Value (\", Year, \"): \", round(Value, 2),\n        #   \"&lt;br&gt;Source: \", input$facet\n        ) %&gt;%\n      na.omit()  \n  })\n  \n  output$worldMap &lt;- renderPlotly({\n    req(map_data())\n    \n    plot_geo(map_data()) %&gt;%\n      add_trace(\n        z = ~Value,\n        color = ~Value,\n        colors = \"Blues\",\n        # text = ~hover_text,\n        locations = ~iso_code,\n        # hoverinfo = \"text\",\n        marker = list(line = list(color = \"gray\", width = 0.5))\n      ) %&gt;%\n      colorbar(title = \"Value\") %&gt;%\n      layout(\n        geo = list(\n          showframe = FALSE,\n          showcoastlines = TRUE,\n          projection = list(type = \"natural earth\"),\n          bgcolor = \"rgba(0,0,0,0)\",\n          landcolor = \"#F0F0F0\",\n          countrycolor = \"#D3D3D3\"\n        ),\n        margin = list(l = 0, r = 0, t = 0, b = 0)\n      )\n  })\n\n  output$table &lt;- renderDT({\n    req(input$facet)\n    \n    df_table &lt;- df %&gt;%\n      filter(source == input$facet) %&gt;%\n      select(Country, Year, Value) %&gt;%\n      datatable(\n        rownames = FALSE,\n        options = list(\n          pageLength = 10,\n          lengthMenu = c(10, 20, 30),\n          autoWidth = TRUE\n        )\n      )\n    df_table  \n  })\n\n  output$downloadData &lt;- downloadHandler(\n    filename = function() {\n      paste(\"data-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv(df, file, row.names = FALSE)\n    }\n  )\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html#chemical-space-analysis",
    "href": "index.html#chemical-space-analysis",
    "title": "Chemical Space Analysis",
    "section": "Chemical Space Analysis",
    "text": "Chemical Space Analysis\n\\[\nC_{i,t} = \\frac{1}{n_t} \\sum_s \\frac{n_{i,s,t}}{n_{a,s,t}}\n\\]\nDescription of Elements:\n\n\\(Ci,tCi,t\\)â€‹: Contribution of country ii to the chemical space (CS) expansion in year tt.\n\\(ntnt\\)â€‹: Total number of new reported chemicals in year tt.\n\\(ss\\): Index representing a specific chemical substance.\n\\(ni,s,tni,s,t\\)â€‹: Number of authors from country ii who published substance ss for the first time in year tt.\n\\(na,s,tna,s,t\\)â€‹: Total number of authors participating in the publication of substance ss in year tt.\n\n\n\n\n\n\n\nNote\n\n\n\nThis formula calculates the weighted contribution of a country to the discovery of new chemical substances. The contribution is proportional to the number of authors from a specific country relative to the total number of authors involved in reporting each substance. Finally, this contribution is normalized by the total number of new substances for that year."
  },
  {
    "objectID": "R-shinylive-demo.html",
    "href": "R-shinylive-demo.html",
    "title": "Joe Chengâ€™s r-shinylive App in a Quarto document!",
    "section": "",
    "text": "This document contains just the Shiny App source code used in Joe Chengâ€™s posit::conf(2023) demo (Warning: Large file size, donâ€™t open on mobile!)\nFor a detailed breakdown, please see the index.qmd file.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\nDocument Source (minus links):\n---\ntitle: \"Joe Cheng's r-shinylive App in a Quarto document!\"\nformat:\n  html:\n    resources: \n      - shinylive-sw.js\nfilters:\n  - shinylive\n---\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```"
  }
]